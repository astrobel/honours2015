### REPRESENTATIVE MODULE: 52 ###

hdulist = pyfits.open('kplr00skeleton-2010174085026_lpd-targ.fits', mode='readonly') #5

table = hdulist[1].data
flux_a = table['FLUX']
#flux_err = table['FLUX_ERR']
time_a = table['TIME']
hd1 = hdulist[1].header
ysize_a = flux_a.shape[0] #hd1['NAXIS2']

table2 = hdulist[2].data
hd2 = hdulist[2].header
x = hd2['NAXIS1']
y = hd2['NAXIS2']
xsize = x * y
temp2d = np.zeros((x, y))

hdulist.close()

hdulist = pyfits.open('kplr00skeleton-2011177032512_lpd-targ.fits', mode='readonly') #9

table = hdulist[1].data
flux_b = table['FLUX']
time_b = table['TIME']
ysize_b = flux_b.shape[0]

hdulist.close()

hdulist = pyfits.open('kplr00skeleton-2012179063303_lpd-targ.fits', mode='readonly') #15

table = hdulist[1].data
flux_c = table['FLUX']
time_c = table['TIME']
ysize_c = flux_c.shape[0]

hdulist.close()

hdulist = pyfits.open('kplr00skeleton-2013131215648_lpd-targ.fits', mode='readonly') #17

table = hdulist[1].data
flux_d = table['FLUX']
time_d = table['TIME']
ysize_d = flux_d.shape[0]

hdulist.close()

# flux = np.concatenate((flux_a, flux_b, flux_c, flux_d))
# time = np.concatenate((time_a, time_b, time_c, time_d))
ysizetotal = ysize_a + ysize_b + ysize_c + ysize_d

# dynamic variable names
for (j, k), img in np.ndenumerate(temp2d):
   index = (k + 1) * j + (x - j) * k
   exec("pixel%d_flux = np.array(None)" % index)
   exec("pixel%d_time = np.array(None)" % index)

second_flux_a = np.zeros([xsize, ysize_a])
second_flux_b = np.zeros([xsize, ysize_b])
second_flux_c = np.zeros([xsize, ysize_c])
second_flux_d = np.zeros([xsize, ysize_d])

# filling the flux arrays
for (i, j, k), val in np.ndenumerate(flux_a):
   index = (j + 1) * k + (x - k) * j
   second_flux_a[index, i] = val
for (i, j, k), val in np.ndenumerate(flux_b):
   index = (j + 1) * k + (x - k) * j
   second_flux_b[index, i] = val
for (i, j, k), val in np.ndenumerate(flux_c):
   index = (j + 1) * k + (x - k) * j
   second_flux_c[index, i] = val
for (i, j, k), val in np.ndenumerate(flux_d):
   index = (j + 1) * k + (x - k) * j
   second_flux_d[index, i] = val

for (j, k), img in np.ndenumerate(table2):
   index = (j + 1) * k + (x - k) * j
   if img == 0:
      pass
   else:
      flux2_a = second_flux_a[index,:]
      flux2_b = second_flux_b[index,:]
      flux2_c = second_flux_c[index,:]
      flux2_d = second_flux_d[index,:]

      # creating a blend array to remove NaNs
      blend = np.array([time_a, flux2_a])
      blend = np.transpose(blend)
      blend2 = np.ma.compress_rows(np.ma.fix_invalid(blend))

      time2_a = blend2[:,0]
      flux2_a = blend2[:,1]

      if smoothtype == "b": # boxcar smoothing
         flux3_a, smth_flux_a = smoothing.boxsmooth(time2_a, flux2_a, kern)
      elif smoothtype == "g": # gaussian smoothing
         flux3_a, smth_flux_a = smoothing.gausssmooth(time2_a, flux2_a, kern)

      blend = np.array([time_b, flux2_b])
      blend = np.transpose(blend)
      blend2 = np.ma.compress_rows(np.ma.fix_invalid(blend))

      time2_b = blend2[:,0]
      flux2_b = blend2[:,1]

      if smoothtype == "b": # boxcar smoothing
         flux3_b, smth_flux_b = smoothing.boxsmooth(time2_b, flux2_b, kern)
      elif smoothtype == "g": # gaussian smoothing
         flux3_b, smth_flux_b = smoothing.gausssmooth(time2_b, flux2_b, kern)

      blend = np.array([time_c, flux2_c])
      blend = np.transpose(blend)
      blend2 = np.ma.compress_rows(np.ma.fix_invalid(blend))

      time2_c = blend2[:,0]
      flux2_c = blend2[:,1]

      if smoothtype == "b": # boxcar smoothing
         flux3_c, smth_flux_c = smoothing.boxsmooth(time2_c, flux2_c, kern)
      elif smoothtype == "g": # gaussian smoothing
         flux3_c, smth_flux_c = smoothing.gausssmooth(time2_c, flux2_c, kern)

      blend = np.array([time_d, flux2_d])
      blend = np.transpose(blend)
      blend2 = np.ma.compress_rows(np.ma.fix_invalid(blend))

      time2_d = blend2[:,0]
      flux2_d = blend2[:,1]

      if smoothtype == "b": # boxcar smoothing
         flux3_d, smth_flux_d = smoothing.boxsmooth(time2_d, flux2_d, kern)
      elif smoothtype == "g": # gaussian smoothing
         flux3_d, smth_flux_d = smoothing.gausssmooth(time2_d, flux2_d, kern)

      flux3 = np.concatenate((flux3_a, flux3_b, flux3_c, flux3_d))
      time2 = np.concatenate((time2_a, time2_b, time2_c, time2_d))

      exec("pixel%d_flux = flux3" % index)
      exec("pixel%d_time = time2" % index)

      exec("tempflux = pixel%d_flux" % index)
      exec("temptime = pixel%d_time" % index)

      clip = inp * np.std(tempflux)
      meanflux = np.mean(tempflux)
 
      upperbound = meanflux + clip
      lowerbound = meanflux - clip

      colours = np.zeros(tempflux.size)

      for i, flux in enumerate(tempflux):
         if flux < upperbound and flux > lowerbound:
            colours[i] = 1

      clipped_flux = []
      clipped_time = []
      for i, colour in enumerate(colours):
         if colour == 1:
            clipped_flux.append(tempflux[i])
            clipped_time.append(temptime[i])

      exec("pixel%d_flux = clipped_flux" % index)
      exec("pixel%d_time = clipped_time" % index)
 
      # export smoothed and clipped data as .dat file
      # exportblend = np.array([clipped_time, clipped_flux])
      # exportblend = np.transpose(exportblend)
      # exec("np.savetxt('kicskeleton_pixel%d_lc.dat', exportblend, delimiter=' ', header='Smoothed and clipped light curve for KICskeleton TPF')" % index)
      
      # fourier transform
      frequencies, power_spectrum = fft(np.asarray(clipped_time), np.asarray(clipped_flux), ofac, hifac)
      if frequencies.shape != power_spectrum.shape:
         power_spectrum = np.concatenate((power_spectrum, [0]))
      power_spectrum = np.sqrt(power_spectrum)
      power_spectrum = 1e6 * ((power_spectrum / (np.median(power_spectrum))) - 1.) # to ppm

      exec("pixel%d_freq = frequencies" % index)
      exec("pixel%d_ps = power_spectrum" % index)
